<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>瓦肯船长</title>
    <link>http://localhost:81/</link>
    <description>Recent content on 瓦肯船长</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Oct 2019 16:08:36 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker clean volume</title>
      <link>http://localhost:81/post/om/docker-volume-clean/</link>
      <pubDate>Wed, 23 Oct 2019 16:08:36 +0800</pubDate>
      
      <guid>http://localhost:81/post/om/docker-volume-clean/</guid>
      <description>docker 磁盘清理 自动清理 docker system prune 已使用的镜像：指所有已被容器（包括stop的）关联的镜像，也就是docker ps -a所看到的所有容器对应的image。</description>
    </item>
    
    <item>
      <title>ovftool usage</title>
      <link>http://localhost:81/post/om/ovftool/</link>
      <pubDate>Wed, 23 Oct 2019 16:08:36 +0800</pubDate>
      
      <guid>http://localhost:81/post/om/ovftool/</guid>
      <description>export ovf ovftool vi://root@8.16.0.119:443/template ./ 目的：可以实现跨越物理机克隆esxi虚拟机 利用VMware workstation（本人使用的pro版）的 OVF Tool导出。 假设你的E</description>
    </item>
    
    <item>
      <title>yum install rpm</title>
      <link>http://localhost:81/post/om/yum/</link>
      <pubDate>Wed, 23 Oct 2019 16:08:36 +0800</pubDate>
      
      <guid>http://localhost:81/post/om/yum/</guid>
      <description>download rpm package yum install &amp;ndash;downloadonly RPM_Name
download rpm package to target dir yum install &amp;ndash;downloadonly &amp;ndash;downloaddir=/usr/package rpm_name
yum install remote file server rpm yum localinstall http://{{ nginx_file_server }}/rpm</description>
    </item>
    
    <item>
      <title>install docker</title>
      <link>http://localhost:81/post/docker/install/</link>
      <pubDate>Fri, 18 Oct 2019 16:08:36 +0800</pubDate>
      
      <guid>http://localhost:81/post/docker/install/</guid>
      <description>#!/usr/bin/env bash #docker17.03 安装： #添加代理 #移除旧的docker yum remove docker docker-common container-selinux docker-selinux docker-engine #安装工具 yum install -y yum-utils #添加仓库 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum makecache yum install -y policycoreutils-python #下载并安装docker-ce-se</description>
    </item>
    
    <item>
      <title>helm 入门实践</title>
      <link>http://localhost:81/post/kubernetes/helm/</link>
      <pubDate>Fri, 04 Oct 2019 16:10:09 +0800</pubDate>
      
      <guid>http://localhost:81/post/kubernetes/helm/</guid>
      <description>下载二进制文件 echo &amp;ldquo;Helm由客户端命helm令行工具和服务端tiller组成，Helm的安装十分简单。 下载helm命令行工具到m</description>
    </item>
    
    <item>
      <title>科学上网</title>
      <link>http://localhost:81/post/kexueshangwang/</link>
      <pubDate>Fri, 04 Oct 2019 16:10:09 +0800</pubDate>
      
      <guid>http://localhost:81/post/kexueshangwang/</guid>
      <description>proxy 由于墙的存在,无法拉取镜像,建议科学上网 下面介绍怎么搭建代理 server 在境外代理机器上通过pip安装shadowsocks,并且启动服务端程序[如</description>
    </item>
    
    <item>
      <title>shell 判断</title>
      <link>http://localhost:81/post/om/shell_judge/</link>
      <pubDate>Fri, 04 Oct 2019 16:08:36 +0800</pubDate>
      
      <guid>http://localhost:81/post/om/shell_judge/</guid>
      <description>shell判断文件,目录是否存在或者具有权限 #!/bin/sh myPath=&amp;quot;/var/log/httpd/&amp;quot; myFile=&amp;quot;/var /log/httpd/access.log&amp;quot; 这里的-x 参数判断$myPath是否存在并且是否具有可执行权限 if [ ! -x &amp;quot;$myPath&amp;quot;]; then mkdir &amp;quot;$myPath&amp;quot; fi 这里的-</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:81/post/kubernetes/resource_code_read/apiserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:81/post/kubernetes/resource_code_read/apiserver/</guid>
      <description>代码入口 架构 </description>
    </item>
    
    <item>
      <title>ansible useage</title>
      <link>http://localhost:81/post/om/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:81/post/om/ansible/</guid>
      <description>基本概念 Tasks：任务，由模板定义的操作列表 Variables：变量 Templates：模板，即使用模板语法的文件 Handlers：处理器</description>
    </item>
    
    <item>
      <title>python log</title>
      <link>http://localhost:81/post/python/python_logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:81/post/python/python_logging/</guid>
      <description>参考 logging root root = RootLogger(WARNING) Logger.root = root Logger.manager = Manager(Logger.root) ?? root is interface init class Logger(Filterer): def __init__(self, name, level=NOTSET): &amp;quot;&amp;quot;&amp;quot; Initialize the logger with a name and an optional level. &amp;quot;&amp;quot;&amp;quot; Filterer.__init__(self) self.name = name self.level = _checkLevel(level) self.parent = None self.propagate = 1 self.handlers = [] self.disabled = 0</description>
    </item>
    
  </channel>
</rss>